========================================
AI 学习助手项目调试总结 (2025-09-10)
========================================

项目目标：修复“智能生成试卷”功能，并解决在此过程中遇到的各种系统问题。

----------------------------------------
问题一：分析“生成试卷”的核心流程
----------------------------------------
*   症状：
    用户反馈“生成试卷总是有很多问题”，具体表现不明确。

*   诊断分析：
    通过对前后端代码的完整流程梳理，发现最根本的问题：后端（Node.js）在生成试卷时，并未调用Python AI微服务。它只是调用了一个本地的 `generateMockQuestions` 函数来创建固定的、非智能的模拟题目。整个AI生成链路是断开的。

*   制定的解决方案：
    1.  重构后端 `paper.js` 中的 `/generate` 路由。
    2.  移除模拟函数，改为使用 `axios` 向Python AI服务发起HTTP请求。
    3.  考虑到AI生成耗时较长，设计了基于 WebSocket 的异步通知方案，以避免前端长时间等待或低效轮询。
        -   前端发起生成请求后，后端立即响应“任务已开始”。
        -   后端在后台与AI服务通信（提交任务 -> 轮询状态 -> 获取结果）。
        -   任务完成后，后端通过WebSocket主动将结果推送给前端。

----------------------------------------
问题二：后端服务启动失败
----------------------------------------
*   症状：
    运行 `docker compose up` 后，`study-assistant-backend` 容器反复崩溃退出。

*   诊断分析：
    Docker日志明确指出错误为 `ReferenceError: optionalAuth is not defined`，发生在 `backend/routes/paper.js` 文件中。原因是该文件使用了一个名为 `optionalAuth` 的中间件，但忘记从 `../middleware/auth.js` 中导入它。

*   已实施的修复：
    1.  在 `backend/routes/paper.js` 文件顶部，将 `require('../middleware/auth.js')` 的解构赋值语句中加入了 `optionalAuth`。
    2.  （附加优化）根据日志警告，修正了 `backend/config/database.js` 中 `mysql2` 连接池的配置项，移除了不支持的参数，避免了启动警告。

----------------------------------------
问题三：查看课程详情时，获取试卷列表失败 (404 Not Found)
----------------------------------------
*   症状：
    进入课程详情页时，浏览器控制台报错，提示 `GET /api/papers?courseId=2&` 404 Not Found。

*   诊断分析：
    请求的URL末尾多了一个无效的 `&` 符号。经排查，原因是前端 `src/services/apiService.js` 文件中的 `papersAPI.getByCourse` 方法在拼接URL时，即使没有额外参数，也会在最后加上 `&`，导致URL格式不规范。

*   已实施的修复：
    1.  重构了 `src/services/apiService.js` 中的 `getByCourse` 方法。
    2.  改用 `URLSearchParams` 对象来健壮地构建查询字符串，确保即使在没有额外参数的情况下也能生成干净、正确的URL（如 `/api/papers?courseId=2`）。

----------------------------------------
问题四：WebSocket 连接失败
----------------------------------------
*   症状：
    用户登录后，浏览器控制台立即出现 `WebSocket connection to 'ws://localhost/api?userId=1' failed` 的错误。

*   诊断分析：
    1.  前端 `useWebSocket.js` hook 构建的WebSocket URL不正确，它错误地重用了 `/api` 路径前缀。
    2.  `nginx.conf` 配置文件只为标准HTTP请求设置了代理，没有为WebSocket协议升级所需的 `Upgrade` 和 `Connection` 请求头进行特殊处理，导致Nginx无法正确代理WebSocket连接。

*   已实施的修复：
    1.  修改了 `src/hooks/useWebSocket.js`，使其根据 `window.location` 动态构建一个完整的、指向专用路径的URL（例如 `ws://localhost/ws?userId=1`）。
    2.  修改了 `nginx.conf`，新增了一个 `location /ws { ... }` 块，专门用于处理WebSocket连接，并添加了正确的代理头信息。

----------------------------------------
当前状态与未解决的问题
----------------------------------------
*   当前状态：
    经过上述修复，系统已经解决了后端启动、URL格式和WebSocket连接配置等多个关键问题。后端服务能够正常启动，前端与后端的通信链路（包括WebSocket）在配置层面已经正确。

*   **未解决的核心问题：**
    **`GET http://localhost/api/papers?courseId=1 404 (Not Found)` 错误依然存在。**
    尽管代码逻辑和配置文件看起来都已正确，但这个错误反复出现。这强烈暗示问题可能并非出在代码逻辑本身，而是**环境或构建缓存**。即，我们所做的代码修改可能没有被成功地应用到正在运行的Docker容器中。

*   最后给出的解决方案（待执行）：
    为了彻底排除缓存问题，建议执行一套强制性的清理和重建流程：
    1.  运行 `docker compose down -v --remove-orphans` 彻底清理容器和数据卷。
    2.  （可选）运行 `docker builder prune` 清理Docker的构建缓存。
    3.  运行 `docker compose up --build --force-recreate` 来确保使用最新的代码进行一次全新的、无缓存的构建和部署。

总结来说，我们已经成功地诊断并修复了多个层面的Bug，从后端代码错误到前端API调用，再到Nginx代理配置。目前剩下的最后一个顽固问题，大概率是部署环境的缓存造成的。