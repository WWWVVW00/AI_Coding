services:
  # MySQL 数据库
  database:
    image: mysql:8.0
    container_name: study-assistant-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: admin123456
      MYSQL_DATABASE: study_assistant
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - study-assistant-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # 后端 API 服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: study-assistant-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=database
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=admin123456
      - DB_NAME=study_assistant
      - JWT_SECRET=your_super_secret_jwt_key_here_change_in_production
      - JWT_EXPIRES_IN=7d
      - PORT=3001
      - UPLOAD_DIR=./uploads
      - MAX_FILE_SIZE=50MB
      - QUESTION_GENERATOR_URL=http://question-generator:8000
    ports:
      - "3001:3001"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - study-assistant-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用 (生产模式)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args: # <--- 添加这个 args 块
        VITE_API_URL: /api
    container_name: study-assistant-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - study-assistant-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- 新增 question-generator 服务 ---
  question-generator:
    build:
      context: ./question_generator
      dockerfile: Dockerfile
    container_name: study-assistant-ai
    restart: unless-stopped
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_MODEL=${GOOGLE_MODEL:-gemini-pro}
      - PORT=8000
    # 注意：这个服务的端口不需要暴露给主机，因为它只在内部网络中被后端调用
    # 如果需要调试，可以取消下面的注释
    # ports:
    #   - "8000:8000"
    networks:
      - study-assistant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  study-assistant-network:
    driver: bridge